
四次挥手：
	第一次挥手：
		client发送FIN报文请求中断连接，FIN=1，seq=u，
		并停止发送数据，进入FIN-WAIT-1状态，等待server的确认
	第二次挥手：
		server收到中断请求报文FIN后发出确认报文，ACK=1，ack=u+1，seq=v，
		并进入CLOSE-WAIT状态，此时tcp处于半关闭状态，client到server的连接释放。
		client收到确认后进入FIN-WAIT-2状态，等待server的释放报文
	第三次挥手：
		server没有要向client发送数据时，server发送释放连接报文FIN=1，ACK=1，seq=w，ack=u+1，
		并进入LAST-ACK状态，等待客户端的确认。
	第四次挥手：
		client收到server的释放请求后，发出确认报文，ACK=1，seq=u+1，ack=w+1，并进入TIME-WAIT状态，
		server收到确认后进入CLOSED状态并释放tcp连接
		此时client端的tcp并未立即释放，需要等待2MSL后再进入CLOSED状态

为什么client在TIME-WAIT状态必须等待2MSL的时间？
	1）保证client发送的最后一个ACK报文段能够到达server。
		也就是若client发送的ACK消息server没有收到，则server会重发FIN+ACK的释放请求
	2）防止“已失效的连接请求报文段”出现在本连接中。
	
	1）这个ACK报文段有可能丢失，使得处于LAST-ACK状态的B收不到对已发送的FIN+ACK报文段的确认，
		B超时重传FIN+ACK报文段，而A能在2MSL时间内收到这个重传的FIN+ACK报文段，接着A重传一次确认，
		重新启动2MSL计时器，最后A和B都进入到CLOSED状态，若A在TIME-WAIT状态不等待一段时间，
		而是发送完ACK报文段后立即释放连接，则无法收到B重传的FIN+ACK报文段，
		所以不会再发送一次确认报文段，则B无法正常进入到CLOSED状态。
	2）A在发送完最后一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失，
		使下一个新的连接中不会出现这种旧的连接请求报文段。


为什么连接的时候是三次握手，关闭的时候却是四次握手？
	因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。
	其中ACK报文是用来应答的，SYN报文是用来同步的。
	但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，
	所以只能先回复一个ACK报文，告诉Client端，“你发的FIN报文我收到了”。
	只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，
	因此不能一起发送。故需要四步握手。
	
shutdown与closesocket的区别：
shutdown:
	该函数用于关闭TCP连接，但并不关闭socket句柄。
	shutdown(s,0); // 关闭读通道，调用recv返回10058，send正常
	shutdown(s,1); // 关闭写通道，调用send返回10058，recv正常
	shutdown(s,2); // 关闭读写通道
	
	SHUT_RD：表明关闭接收通道，在该socket上不能再接收数据，如果当前接收缓存中仍有未取出数据或者以后再有数据到达，则TCP会向发送端发送RST包，将连接重置。
	SHUT_WR：表明关闭发送通道，TCP会将发送缓存中的数据都发送完毕并收到所有数据的ACK后向对端发送FIN包，表明本端没有更多数据发送。这个是一个优雅关闭过程。
	SHUT_RDWR：则表示同时关闭接收通道和发送通道。
	
close/closesocket：
	该函数用于关闭socket句柄，并释放资源。
	调用close时会隐含触发TCP连接的关闭过程。
	
	关闭socket,应用层无法读写数据，tcp层数据可以接收正常(相当于应用层关闭文件描述符，无法再继续使用文件描述符)

	
案例分析：
	1、client直接调用closesocket
	第二次挥手client调用closesocket向服务器发送FIN，server收到FIN后回复ACK，此时进入半连接状态，client端调用send或recv都返回-1，errno=10038，使用非法socket
	server端调用send发送数据会收到client返回RST+ACK数据包errno=10054对方reset peer，调用recv会收到接收长度为0
	
	1、client直接调用shutdown(s,1) ===>只关闭写通道	
	第二次挥手client调用shutdown向服务器发送FIN，server收到FIN后回复ACK，此时进入半连接状态，client端调用send返回-1，errno=10058，使用非法socket，
	*******************************client端调用recv能正常接收数据*******************************
	*******************************server端调用send能正常发送数据*******************************
	

	
强制关闭与优雅关闭：SO_LINGER 选项
	
	struct linger {
		int		l_onoff;	/* Linger active		*/
		int		l_linger;	/* How long to linger for	*/
	};
	
	1. l_onoff 是 0 时
		****默认****
		close会立即返回，并关闭socket句柄。 
		此时，若缓冲区中仍有数据未发送，则协议栈会在后台将这些数据发送完毕，而后关闭TCP连接。这是一个优雅关闭的过程。
		副作用：socket的底层资源会被保留，直到TCP连接关闭。这个时间应用程序是无法把控的。
		**************会产生time_wait***************
	
	2. l_onoff 非 0，l_linger 是 0 时
		close会立即返回，并关闭socket句柄。 
		此时，若缓冲区中仍有数据未发送，TCP会发送RST包，重置连接，所有未发送数据都将丢失。这是一个强制关闭的过程。
		**************不会产生time_wait，是真的吗？？***************
		
	3. l_onoff 非 0，l_linger 非 0 时
		若缓冲区中仍有数据未发送，如果TCP在l_linger表明的时间内将数据全部发送出去，则发送完毕后关闭TCP连接，这是优雅关闭过程；如果TCP在l_linger表明的时间内没有将数据全部发送出去，则会丢弃所有未发送的数据，而后发送RST包，重置连接，这是一个强制关闭的过程。

		当socket是阻塞式的，此时close的调用将是阻塞式的，直到优雅关闭或强制关闭的过程完成。
		当socket的是非阻塞式的，它将不等待close完成。此时，应用程序需要检查close的返回值，因为如果在数据发送完成并被确认前，l_linger时间超时的话close将返回EWOULDBLOCK错误。